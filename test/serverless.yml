service: test
frameworkVersion: '3'

custom:
  tableName: 'Report'

provider:
  name: aws
  runtime: nodejs12.x
  # These two lines should hopefully make it easier to type the deploy command.
  region: us-east-2
  profile: Collin123
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:us-east-2:076692945864:table/Report"
        # - Effect: Allow
        #   Action:
        #     - cognito-idp:AdminInitiateAuth
        #     - cognito-idp:AdminCreateUser
        #     - cognito-idp:AdminSetUserPassword
        #   Resource: "*"
  environment:
    REPORT_TABLE: ${self:custom.tableName}
    # user_pool_id: { Ref: UserPool }
    # client_id: { Ref: UserClient }

functions:
  # How do I change the authorizers so that only the correct user or the admin can use the functions?
  create:
    handler: Lambda_Functions/addReport.handler
    events:
      - http:
          path: add-report
          method: post
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - id
              - account_id
            allowCredentials: false
          # authorizer:
          #   name: AddReportAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  list:
    handler: Lambda_Functions/getReports.handler
    events:
      - http:
          path: list-reports
          method: get
          cors: true
          # authorizer:
          #   name: ListReportsAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  get:
    handler: Lambda_Functions/getOneReport.handler
    events:
      - http:
          path: get-one-report
          method: get
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - id
              - account_id
            allowCredentials: false
          # authorizer:
          #   name: GetOneReportAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  listForAccount:
    handler: Lambda_Functions/getReportsForAccount.handler
    events:
      - http:
          path: list-reports-for-account
          method: get
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - account_id
            allowCredentials: false
          # authorizer:
          #   name: ListReportsForAccountAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  update:
    handler: Lambda_Functions/editReport.handler
    events:
      - http:
          path: update-report
          method: put
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
              - id
              - account_id
            allowCredentials: false
          # authorizer:
          #   name: UpdateReportAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  # login:
  #   handler: Lambda_Functions/Auth/login.handler
  #   events:
  #     - http:
  #         path: login
  #         method: post
  #         cors: true

# resources:
#   Resources:
#     UserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: serverless-auth-pool
#         Schema:
#           - Name: email
#             Required: true
#             Mutable: true
#         Policies:
#           PasswordPolicy:
#             MinimumLength: 6
#         AutoVerifiedAttributes: ["email"]

#     UserClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: user-pool-ui
#         GenerateSecret: false
#         UserPoolId: { Ref: UserPool }
#         AccessTokenValidity: 5
#         IdTokenValidity: 5
#         ExplicitAuthFlows:
#           - "ADMIN_NO_SRP_AUTH"
